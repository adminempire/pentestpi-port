#!/usr/bin/env python
import subprocess
import re

# Constants
IWCONFIG = "iwconfig"
IFCONFIG = "ifconfig"
ipre = re.compile("addr:[0-9.]+")

class Device():
    """Class that defines a device object."""
    ifname = None
    ip = None
    
    def __init__(self, ifname):
        self.ifname = ifname

        
if __name__ == "__main__":
    """Main function"""
    
    # Get iwconfig output - no params results in error, but it's what we want
    tmp = subprocess.Popen(IWCONFIG, stderr=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[1]
    
    # Split into array
    tmp2 = tmp.split("\n")
    
    # Remove empty indexes from devices list
    tmp3 = [x for x in tmp2 if x != ''] 
    
    # Clean indexs of excess whitespace
    devices = []
    for i in tmp3:
        devices.append(i.strip())
    
    # Parse iwconfig output
    deviceList = []
    for device in devices:
        tmp = device.replace(' ', ":", 1)
        tmp2 = tmp.split(':')
        desc = tmp2[1].strip()
        ifname = tmp2[0].strip()

        if ifname != "lo":
            if "no wireless" in desc:
                dev = Device(ifname)
                deviceList.append(dev)
    
    # Get ifconfig output and parse
    tmp = subprocess.Popen(IFCONFIG, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0]
    tmp2 =  re.sub("\n\n", "---", tmp)
    ifoutput = tmp2.split("---")
    
    # Parse output for ip and insert in device objects
    for device in deviceList:
        for i in ifoutput:
            if device.ifname in i:
                tmp = ipre.search(i)
                if tmp is not None:
                    device.ip = tmp.group().split(":")[1]
    
    # Checks if device has an active connection, the prints output
    for device in deviceList:
        if device.ip is not None:
            print "Wired: True"
            print "Interface:", device.ifname
            print "IP:", device.ip + "\n"
            